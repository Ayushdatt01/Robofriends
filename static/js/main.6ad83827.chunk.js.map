{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","id","email","className","alt","src","Cardlist","robots","map","user","index","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","console","log","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qNAiBeA,EAdF,SAACC,GAAY,IACnBC,EAAkBD,EAAlBC,KAAKC,EAAaF,EAAbE,GAAIC,EAASH,EAATG,MAChB,OAEC,sBAAKC,UAAU,sDAAf,UACA,qBAAKC,IAAK,QAAQC,IAAG,+BAA0BJ,EAA1B,cACrB,gCACE,6BAAKD,IACL,4BAAIE,WCQQI,EAhBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEnB,OACE,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACd,OAAO,cAAC,EAAD,CAAkBT,GAAIM,EAAOG,GAAOT,GAAID,KAAMO,EAAOG,GAAOV,KAAME,MAASK,EAAOG,GAAOR,OAA9EQ,SCOVC,EAdG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEpB,OACC,qBAAKT,UAAU,KAAf,SACA,uBACAA,UAAU,mCACVU,KAAO,SACPC,YAAa,gBACbC,SAAYH,OCGEI,EAXA,SAACjB,GAEhB,OACE,qBAAKkB,MAAQ,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SAESrB,EAAMsB,YC4CFC,E,kDA5Cf,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb5C,EAAKC,MAAQ,CACVtB,OAAQ,GACXmB,YAAa,IAJD,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAClB,OAAO2B,S,+BAQ7B,IAAD,OACDC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAAC,GAC9C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAInE,OAFCE,QAAQC,IAAIP,GAEmB,IAA7BC,KAAKP,MAAMtB,OAAOoC,OAEb,4CAIP,sBAAKxC,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAgBwB,KAAKb,iBAChC,cAAC,EAAD,UACG,cAAC,EAAD,CAAUhB,OAAQ4B,a,GArCJS,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACT,cAAC,EAAD,IACEC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.6ad83827.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props,) => {\r\n\tconst{name,id, email} = props // We can add this line in parameter section as well and can ignore props\r\nreturn (\r\n\r\n\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n\t<img alt =\"robot\" src={`https://robohash.org/${id}?200*200`} />\r\n\t<div>\r\n\t  <h2>{name}</h2>\r\n\t  <p>{email}</p>\r\n\t</div>  \r\n</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) =>{\r\n\r\nreturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,index) => {\r\n\t\t\t    return <Card key={index} id={robots[index].id} name={robots[index].name} email = {robots[index].email} />\r\n\r\n\t\t\t})\r\n\r\n\t\t } \r\n\t\t\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) =>\r\n{\r\nreturn(\r\n\t<div className='p2'>  \r\n\t<input \r\n\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\ttype = 'search' \r\n\tplaceholder ='search robots' \r\n\tonChange = {searchChange} />\r\n\t\r\n\t</div>\r\n);\r\n}\r\n\r\nexport default Searchbox;\r\n\r\n//  pd = padding 2 by tachyons ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\nreturn (\r\n\t\t<div style ={{overflowY:'scroll', border: '5px solid black', height: '800px'}}>\r\n          \r\n          {props.children}\r\n        </div>\r\n\t);\r\n\r\n};\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll'\r\n\r\nclass App extends Component {\r\n\r\nconstructor(){\r\n\tsuper()\r\n\tthis.state = {\r\n    robots: [],\r\n\tsearchfield: '' \r\n\t}\t\t\r\n}\r\n\r\ncomponentDidMount(){\t\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(users => this.setState({robots:users}));\r\n}\r\n\r\nonSearchChange = (event) => {\r\n  \tthis.setState({ searchfield: event.target.value }) \r\n }\r\n//this.setState({searchfield: event.target.value}) -> This will update searchfiled autmatically\r\n\r\nrender(){\r\n\tconst filteredRobots = this.state.robots.filter(robot => {\r\n  \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n})\r\n\tconsole.log(filteredRobots)\r\n\t\r\nif(this.state.robots.length === 0)\r\n{\r\n\treturn <h1>LOADING...</h1>\r\n}\r\n\r\nreturn (\r\n\t<div className='tc'>\r\n\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t<Searchbox searchChange = {this.onSearchChange} />\r\n\t<Scroll>\r\n\t   <Cardlist robots={filteredRobots} />\r\n\t</Scroll>\r\n\t</div>\t\r\n);\r\n\r\n}\r\n\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n<App />\r\n, document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}